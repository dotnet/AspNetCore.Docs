@page "/departments/details/{DepartmentId:int}"

@using ContosoUniversity.Data
@using ContosoUniversity.Models
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<SchoolContext> DbFactory

@inject NavigationManager NavigationManager

<h1>Details</h1>

<h4>Department</h4>
<hr />

@if (Department is null)
{
    <div class="alert alert-warning">A department with the id @DepartmentId does not exist.</div>
}
else
{
    <DepartmentDetails Department="@Department" />
    <div>
        <button class="btn btn-success" @onclick="@(() => Edit())">Edit</button>
    </div>
}
<br />
<div>
    <a href="./departments">Back to list</a>
</div>


@code {
    /// <summary>
    /// Id from route of the department.
    /// </summary>
    [Parameter]
    public int DepartmentId { get; set; }

    /// <summary>
    /// Department entity.
    /// </summary>
    private Department? Department { get; set; }

    /// <summary>
    /// Triggered for any paging update.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    protected override async Task OnParametersSetAsync()
    {
        Department = null;

        using var context = DbFactory.CreateDbContext();
        if (context.Departments is not null)
        {
            Department = await context.Departments
            .Include(d => d.Administrator)
            .AsNoTracking()
            .SingleOrDefaultAsync(d => d.DepartmentID == DepartmentId);
        }
        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// Edit department
    /// </summary>
    private void Edit()
    {
        NavigationManager.NavigateTo(string.Format("./departments/edit/{0}", DepartmentId));
    }
}
