@page "/courses/details/{CourseId:int}"

@using ContosoUniversity.Data
@using ContosoUniversity.Models
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<SchoolContext> DbFactory

@inject NavigationManager NavigationManager

<h1>Details</h1>

<h4>Course</h4>
<hr />

@if (Course is null)
{
    <div class="alert alert-warning">A course with the id @CourseId does not exist.</div>
}
else
{
    <CourseDetails Course="@Course" />
    <div>
        <button class="btn btn-success" @onclick="@(() => Edit())">Edit</button>
    </div>
}
<br />
<div>
    <a href="./courses">Back to list</a>
</div>


@code {
    /// <summary>
    /// Id from route of the course.
    /// </summary>
    [Parameter]
    public int CourseId { get; set; }

    /// <summary>
    /// Course entity.
    /// </summary>
    private Course? Course { get; set; }

    /// <summary>
    /// Triggered for any paging update.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    protected override async Task OnParametersSetAsync()
    {
        Course = null;

        using var context = DbFactory.CreateDbContext();
        if (context.Courses is not null)
        {
            Course = await context.Courses
            .Include(c => c.Department)
            .AsNoTracking()
            .SingleOrDefaultAsync(c => c.CourseID == CourseId);
        }
        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// Edit course
    /// </summary>
    private void Edit()
    {
        NavigationManager.NavigateTo(string.Format("./courses/edit/{0}", CourseId));
    }
}
